// Autumn Jiang
// CSCB07 Assignment

package com.bank.users;

import com.bank.databasehelper.DatabaseSelectHelper;
import com.bank.databasehelper.DatabaseUpdateHelper;
import com.bank.security.PasswordHelpers;

public abstract class User {
  
  // Private attributes
  protected int id;                    // id is an immutable integer ID created by the database
  protected String name;               // name is the user's name
  protected int age;                   // age is the user's age
  protected String address;            // address is a string of <100 characters; the user's address
  protected int roleId;                // roleID is the role generated by the database
  protected boolean authenticated;     // authenticated is the authentication status of the user
  private boolean idSet = false;       // Ensure Id can never be changed once set.
  
  /**
   * Returns a User's ID number.
   * @return number of User
   */
  public int getId() {
    return this.id;
  }
  
  
  /**
   * Returns a User's Address.
   * @return address of User
   */
  public String getAddress() {
    return this.address;
  }
  
  
  /**
   * Updates a user's address both within the class and the database,
   * if the user is defined in the database.
   * 
   * @param address of User
   */
  public void setAddress(String address) {
    // All changes to user names must be verified by the database
    boolean nameSetDatabase = DatabaseUpdateHelper.updateUserAddress(address, this.id);
    
    // If the name was changed in the database:
    if (nameSetDatabase) {
      // Reflect the change
      this.address = address;
    }
  }
  
  
  /**
   * Sets the User's ID number to the value assigned to it by the database
   * if and only if it has not already been assigned a value.
   * @param id number of User
   */
  public void setId(int id) {
    // If the ID hasn't previously been set:
    if (!idSet) {
      // Set it now
      this.id = id;
      // Prevent it from being reset
      idSet = true;
    }
  }
  
  
  /**
   * Returns a User's name.
   * @return name of User
   */
  public String getName() {
    return this.name;
  }
  
  
  /**
   * Updates a user's name both within the class and the database,
   * if the user is defined in the database.
   * 
   * @param name of User
   */
  public void setName(String name) {
    // All changes to user names must be verified by the database
    boolean nameSetDatabase = DatabaseUpdateHelper.updateUserName(name, this.id);
    
    // If the name was changed in the database:
    if (nameSetDatabase) {
      // Reflect the change
      this.name = name;
    }
  }
  
  
  /**
   * Returns a User's age.
   * @return age of User
   */
  public int getAge() {
    return this.age;
  }
  
  
  /**
   * Updates a User's age both in the class and in the database
   * if the given age is a positive integer and the user is defined
   * in the database.
   * 
   * @param age of User
   */
  public void setAge(int age) {
    // All changes to user ages must be verified by the database
    boolean ageSetDatabase = DatabaseUpdateHelper.updateUserAge(age, this.id);
    
    // If the age was changed in the database:
    if (ageSetDatabase) {
      // Reflect the change
      this.age = age;
    }
  }
  
  
  /**
   * Returns a User's role ID.
   * @return roleId of User
   */
  public int getRoleId() {
    return this.roleId;
  }
  
  
  /**
   * Returns whether or not a User is authenticated.
   * @param password is the unhashed password given by the user
   * @return true if the password matches the one in the database, false otherwise
   */
  public final boolean authenticate(String password) {
    // Get the password stored for the User in the database
    String databasePw = DatabaseSelectHelper.getPassword(this.id);
    
    // Set the default response to false
    boolean authenticatedDb = false;
    
    // If the password is not null:
    if (!(databasePw == null)) {
      
      // Compare the database password with the inputed password and get token
      authenticatedDb  = PasswordHelpers.comparePassword(databasePw, password);
    }
    
    // Set the User's authentication status
    this.authenticated = authenticatedDb;
    
    // Return the authentication status
    return authenticatedDb;  
  }
  
}
